{"version":3,"sources":["api/movieApi.ts","Movie.tsx","sortMovie/upcomingMovie.tsx","sortMovie/baseMovie.tsx","Filter.tsx","MoviesList.tsx","MovieDetails.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","API_KEY","movieApi","get","Movie","props","to","movie","id","config","images","base_url","src","poster_path","alt","title","UpcomingMovie","className","upcomingMovies","filter","toLowerCase","includes","map","BaseMovie","movies","useStyles","makeStyles","theme","createStyles","root","display","flexWrap","textField","marginLeft","spacing","marginRight","width","margin","createMuiTheme","palette","primary","yellow","Filter","classes","noValidate","ThemeProvider","TextField","color","variant","label","value","onChange","e","setFilter","target","MoviesList","useState","setMovies","setConfig","setUpcomingMovies","showBase","setShowBase","getUpcoming","a","res","data","results","console","error","getMovie","getConfig","useEffect","then","ButtonGroup","disableElevation","Button","onClick","MovieDetails","IMAGE_URL","setMovie","useParams","fetch","json","newMovie","backdrop_path","overview","genres","genre","name","style","justifyContent","release_date","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cc93c31.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3/'\r\n})\r\n\r\nexport const API_KEY = '?api_key=88d152960bc5347471fe0bb0965e6bf9'\r\n\r\n\r\nexport const movieApi = {\r\n    getMovie() {\r\n        return instance.get(`discover/movie${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_watch_monetization_types=flatrate`)\r\n    },\r\n    getConfig() {\r\n        return instance.get(`configuration${API_KEY}`)\r\n    },\r\n    getUpcoming() {\r\n        return instance.get(`movie/upcoming${API_KEY}&language=en-US&page=1`)\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {movieType} from \"./MoviesList\";\r\n\r\ntype PropsType = {\r\n    movie: movieType\r\n    config?: {\r\n        images: { base_url?: string }\r\n    }\r\n}\r\n\r\n\r\nexport const Movie = (props: PropsType) => {\r\n    return <li>\r\n        <Link to={`/movie/${props.movie.id}`}>\r\n            {props.config?.images?.base_url &&\r\n            <img src={` ${props.config.images.base_url}w342${props.movie.poster_path} `}\r\n                 alt={`${props.movie.title}Poster`}/>}\r\n\r\n\r\n        </Link>\r\n\r\n\r\n    </li>\r\n}","import React from 'react';\r\nimport {Movie} from \"../Movie\";\r\nimport {movieType} from \"../MoviesList\";\r\n\r\ntype PropsType = {\r\n    filter: string\r\n    setFilter: (value: string) => void\r\n    upcomingMovies: Array<movieType>\r\n    config?: {\r\n        images: { base_url?: string }\r\n    }\r\n}\r\n\r\nexport const UpcomingMovie = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ul className={'movies-list'}>\r\n                {props.upcomingMovies.filter((movie: { title: string }) =>\r\n                    movie.title.toLowerCase().includes(props.filter.toLowerCase())\r\n                ).map((movie: movieType) =>\r\n                    <Movie key={movie.id} movie={movie} config={props.config}/>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Movie} from \"../Movie\";\r\nimport {movieType} from \"../MoviesList\";\r\n\r\ntype PropsType = {\r\n    filter: string\r\n    setFilter: (value: string) => void\r\n    movies: Array<movieType>\r\n    config?: {\r\n        images: { base_url?: string }\r\n    }\r\n}\r\n\r\nexport const BaseMovie = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ul className={'movies-list'}>\r\n                {props.movies.filter((movie: { title: string }) =>\r\n                    movie.title.toLowerCase().includes(props.filter.toLowerCase())\r\n                ).map((movie: movieType) =>\r\n                    <Movie key={movie.id} movie={movie} config={props.config}/>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\nimport {createMuiTheme, createStyles, makeStyles, Theme, ThemeProvider,} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {yellow} from '@material-ui/core/colors';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '50ch',\r\n        },\r\n        margin: {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: yellow,\r\n\r\n    },\r\n});\r\n\r\n\r\ntype FilterType = {\r\n    filter: string\r\n    setFilter: (value: string) => void\r\n}\r\n\r\nexport const Filter = (props: FilterType) => {\r\n    const classes = useStyles();\r\n\r\n    const movieFilter = (e: ChangeEvent<HTMLInputElement>) => props.setFilter(e.target.value)\r\n\r\n    return (<form className={classes.root} noValidate>\r\n            <ThemeProvider theme={theme}>\r\n                <TextField\r\n                    color=\"secondary\"\r\n                    variant=\"filled\"\r\n                    className={classes.margin}\r\n                    label=\"Search Film\"\r\n                    id=\"mui-theme-provider-standard-input\"\r\n                    value={props.filter} onChange={movieFilter}\r\n                />\r\n            </ThemeProvider>\r\n        </form>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {movieApi} from \"./api/movieApi\";\r\nimport {UpcomingMovie} from \"./sortMovie/upcomingMovie\";\r\nimport {BaseMovie} from \"./sortMovie/baseMovie\";\r\nimport {Filter} from \"./Filter\";\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport type movieType = {\r\n    id: number\r\n    poster_path: string\r\n    title: string\r\n}\r\n\r\n\r\nexport const MoviesList = () => {\r\n\r\n    const [filter, setFilter] = useState('')\r\n    const [movies, setMovies] = useState<Array<movieType>>([])\r\n    const [config, setConfig] = useState<any>({})\r\n    const [upcomingMovies, setUpcomingMovies] = useState<Array<movieType>>([])\r\n    const [showBase, setShowBase] = useState(true)\r\n\r\n\r\n    const getUpcoming = async () => {\r\n        try {\r\n            const res = await movieApi.getUpcoming()\r\n            setUpcomingMovies(res.data.results)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n\r\n    const getMovie = async () => {\r\n        try {\r\n            const res = await movieApi.getMovie()\r\n            setMovies(res.data.results)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const getConfig = async () => {\r\n        try {\r\n            const res = await movieApi.getConfig()\r\n            setConfig(res.data)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMovie().then(() => {\r\n        })\r\n        getConfig().then(() => {\r\n        })\r\n        getUpcoming().then(() => {\r\n        })\r\n    }, [])\r\n\r\n\r\n    return (<div>\r\n        <ButtonGroup disableElevation variant=\"contained\" color=\"secondary\">\r\n            <Button onClick={() => setShowBase(true)}>Base</Button>\r\n            <Button onClick={() => setShowBase(false)}>Upcoming</Button>\r\n        </ButtonGroup>\r\n        <Filter filter={filter} setFilter={setFilter}/>\r\n        {showBase && <BaseMovie filter={filter} setFilter={setFilter} config={config} movies={movies}/>}\r\n        {!showBase &&\r\n        <UpcomingMovie upcomingMovies={upcomingMovies} filter={filter} setFilter={setFilter} config={config}/>}\r\n    </div>)\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useParams} from 'react-router-dom'\r\n\r\ninterface ParamsType {\r\n    id: string\r\n}\r\n\r\nconst MovieDetails = () => {\r\n    const BASE_URL = 'https://api.themoviedb.org/3/movie/'\r\n    const API_KEY = '?api_key=88d152960bc5347471fe0bb0965e6bf9'\r\n    const IMAGE_URL = 'https://image.tmdb.org/t/p/'\r\n    const BACKDROP_SIZE = 'original'\r\n    const POSTER_SIZE = 'w342'\r\n    const [movie, setMovie] = useState<any>({})\r\n\r\n    const {id} = useParams<ParamsType>()\r\n\r\n    const getMovie = async () => {\r\n        try {\r\n            const res = await fetch(`${BASE_URL}${id}${API_KEY}`)\r\n            const newMovie = await res.json()\r\n            setMovie(newMovie)\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMovie()\r\n    }, [id])\r\n\r\n    return (\r\n        <div>\r\n            <img className={'backdrop'} src={`${IMAGE_URL}${BACKDROP_SIZE}${movie.backdrop_path}`}\r\n                 alt={`${movie.title}Backdrop`}/>\r\n            <div className={'detail-details'}>\r\n                <img className={'detail-poster'} src={`${IMAGE_URL}${POSTER_SIZE}${movie.poster_path}`}\r\n                     alt={`${movie.title}Poster`}/>\r\n                <div>\r\n                    <h1>{movie.title}</h1>\r\n                    <p>{movie.overview}</p>\r\n                    <ul>\r\n                        {movie.genres?.map((genre: { name: string }) => {\r\n                            return <li>\r\n                                {genre.name}\r\n                            </li>\r\n\r\n                        })}\r\n                    </ul>\r\n                  <div style={{display: \"flex\",\r\n                      justifyContent: 'flex-end',\r\n                      }}>release date: {movie.release_date}</div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieDetails;","import React from 'react';\nimport './App.css';\nimport {MoviesList} from \"./MoviesList\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport MovieDetails from \"./MovieDetails\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route path={'/movie/:id'}>\n                        <MovieDetails/>\n                    </Route>\n                    <Route exact path={'/movies'}>\n                        <MoviesList/>\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App/>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}